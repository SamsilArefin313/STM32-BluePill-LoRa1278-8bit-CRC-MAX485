#include <SPI.h>
#include <LoRa_STM32.h>

#define NSS PA4
#define RST PB0
#define DI0 PA1

#define TX_P 17
#define BAND 433E6
#define ENCRYPT 0x78
//Ultrasonic Sensor A,B
const int trigPinA = PA8;
const int echoPinA = PB12;
long durationA;
int distanceA;
const int trigPinB = PB14;
const int echoPinB = PB15;
long durationB;
int distanceB;
//Ultrasonic Sensor A,B
// Analog Sensor1
#define AnalogPin1 PB1
// Analog Sensor1

int password=0;

int counter = 0;
String LoRaMessage = "";
String outgoing;
byte msgCount = 0;            // count of outgoing messages
byte localAddress = 0xBB;     // address of this device
byte destination = 0xFF;      // destination to send to
long lastSendTime = 0;        // last send time
int interval = 50;          // interval between sends
//String temp;     //DS18B20 temperature
int flag=0;
int condition=0;
void setup()
{
  Serial.begin(9600);
  //Ultrasonic Sensor A,B
  pinMode(trigPinA, OUTPUT);  // Sets the trigPinA as an Output
  pinMode(echoPinA, INPUT);   // Sets the echoPinA as an Input
  pinMode(trigPinB, OUTPUT);  // Sets the trigPinA as an Output
  pinMode(echoPinB, INPUT);   // Sets the echoPinA as an Input
  //Ultrasonic Sensor A,B
  ;
  while (!Serial);
  Serial.println("LoRa Two Way Communication");
  LoRa.setPins(NSS, RST, DI0);
  if (!LoRa.begin(433E6)) {
    Serial.println("Starting LoRa failed!");
    delay(100);
    while (1);
  }
}
void loop()
{
  if (millis() - lastSendTime > interval) {
    

 //Ultrasonic Sensor A,B
  digitalWrite(trigPinA, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPinA, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinA, LOW);
  durationA = pulseIn(echoPinA, HIGH);
  distanceA = durationA * 0.034 / 2;
  //Serial.print("DistanceA: ");
  Serial.print(distanceA);
  Serial.print("+");

  digitalWrite(trigPinB, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPinB, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinB, LOW);
  durationB = pulseIn(echoPinB, HIGH);
  distanceB = durationB * 0.034 / 2;
  //Serial.print("DistanceB: ");
  Serial.print(distanceB);
  Serial.print("+");
  //Ultrasonic Sensor A,B
  // Analog Sensor1
  int sensorValue = analogRead(AnalogPin1);
  //Serial.print("Analog: ");
  Serial.println(sensorValue);

  delay(500);
  // Analog Sensor1
// SENSOR dATA CONDITION
 if ((sensorValue < 1000) && (distanceA < 10) && (distanceB < 10)){
    condition = 1; 
 }
 else{
   condition = 0;
 }
 


  
  if (flag==1){
    String message = String(distanceA) + "/" + String(distanceB) + "&"+ String(sensorValue)+"#";//............
    sendMessage(message);
    }
    else{
    // Conditions of sensor data
       if(condition ==1){
        String message = String("OK") ;//............
        sendMessage(message);
        delay(3000);

       }
       else{
         String message = String("NG") ;//............
         sendMessage(message);
         
       }
    

    }
    // Serial.println("Sending " + message);
    lastSendTime = millis();            // timestamp the message
    interval = random(50) + 100;    // 2-3 seconds//............
  }
  // parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
}
void sendMessage(String outgoing) {
    uint8_t crc = custom_crc((uint8_t *)outgoing.c_str(), outgoing.length());

  LoRa.beginPacket();                   // start packet
  LoRa.write(destination);              // add destination address
  LoRa.write(localAddress);             // add sender address
  LoRa.write(msgCount);                 // add message ID
  LoRa.write(outgoing.length() + 1);    // add payload length (+1 for the CRC byte)
  LoRa.print(outgoing);                 // add payload
  LoRa.write(crc);                      // add CRC value
  LoRa.endPacket();                     // finish packet and send it
  msgCount++;  
}
//--------------- Start receiving DS18B20 Temperature Data --------------------
void onReceive(int packetSize) {
  if (packetSize == 0) return;

  // read packet header bytes:
  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length

  // received a packet
  String LoRaData = LoRa.readString();

  // Extract and validate CRC
  uint8_t received_crc = LoRaData[incomingLength - 1];
  uint8_t calculated_crc = custom_crc((uint8_t *)LoRaData.c_str(), incomingLength - 1);
  Serial.println(received_crc);
  Serial.println(calculated_crc);
  delay(1000);

  if (received_crc == calculated_crc) {
    // Process the data
    String temp = LoRaData.substring(0, incomingLength - 1);
    //Serial.print(LoRaData);
    // read packet
    while (LoRa.available()) {
      Serial.print((char)LoRa.read());    
    }

    // print RSSI of packet
    //Serial.print("' with RSSI ");
    //Serial.println(LoRa.packetRssi());
    //temp = LoRaData.substring(0, LoRaData.length());
    //Serial.print("temp-");
    //Serial.println(temp);
    delay(300);

    if(temp=="1000"){
      Serial.println(" Button released, Data Sending...");
      flag=1;
      delay(500);
    }

    if(temp=="2000"){
      Serial.println(" Button pressed, No Data sending!");
      flag=0;
      delay(500);
    }
  } else {
    Serial.println("CRC check failed");
  }

  //Serial.println();
  delay(1000);

}

uint8_t custom_crc(uint8_t *data, uint8_t len) {
  // Implement your custom CRC function here
  // This example uses a simple XOR-based checksum
  uint8_t crc = 0;
  for (uint8_t i = 0; i < len; i++) {
    crc ^= data[i];
  }
  return crc;
}